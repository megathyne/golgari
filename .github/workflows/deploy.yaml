name: Deploy to Amazon ECS

on:
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          # ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REGISTRY: 475250635549.dkr.ecr.us-east-1.amazonaws.com
          # ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
          ECR_REPOSITORY: golgari
          # IMAGE_TAG: ${{ github.sha }}
          IMAGE_TAG: latest
        run: |
          echo "$ECR_REGISTRY"
          echo "$ECR_REPOSITORY"
          echo "$IMAGE_TAG"
          # aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 475250635549.dkr.ecr.us-east-1.amazonaws.com
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./services/api/
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          # echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
        with:
          task-definition: ${{ vars.ECS_TASK_DEFINITION }}
          container-name: ${{ vars.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ vars.ECS_SERVICE }}
          cluster: ${{ vars.ECS_CLUSTER }}
          wait-for-service-stability: true
